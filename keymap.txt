# The TabSpace Twiddler Keymap

# Brandon Craig Rhodes http://www.rhodesmill.org/brandon
# Version 0.3, Monday 15 November 1999
# May be shared and modified if credited

# The three top buttons map to the most frequently used keys.  Note
# that in sane command line environments (those that support
# completions), tab is used nearly as much as backspace and both are
# often used many times per line (so we make them more convenient than
# a carriage return).

0     r000 = 8
0     m000 = 32
0     l000 = 9

# Next are the nine most common letters, which can each be produced
# with a single keypress.  They are carefully arranged so that the
# most common combinations of them can be pressed simultaneously to
# produce double letters.  In each case the double letter combinations
# output their two constituent letters in the most common order
# (though with some such as er-re it was a close call).  The doubles
# can be expected to account for roughly one-third of the adjacent
# letter pairs in normal English text!

0     0m00 = 101
0     00m0 = 116
0     000m = 104
0     0l00 = 111
0     00l0 = 114
0     000l = 115
0     0r00 = 105
0     00r0 = 110
0     000r = 97

0     0r0r = 97
0     0r0m = 104,105
0     0r0l = 105,115
0     0rr0 = 105,110
0     0rm0 = 105,116
0     0rl0 = 114,105
0     0m0r = 101,97
0     0m0m = 104,101
0     0m0l = 101,115
0     0mr0 = 101,110
0     0mm0 = 116,101
0     0ml0 = 101,114
0     0l0r = 111,97
0     0l0m = 104,111
0     0l0l = 115,111
0     0lr0 = 111,110
0     0lm0 = 116,111
0     0ll0 = 111,114
0     00rr = 97,110
0     00rm = 104,110
0     00rl = 110,115
0     00mr = 97,116
0     00mm = 116,104
0     00ml = 115,116
0     00lr = 97,114
0     00lm = 104,114
0     00ll = 114,115

# Every other letter is produced by pressing the top middle button
# (the spacebar) and some combination of the lower keys.  It is
# expected that during normal typing the index finger will stay on the
# spacebar.  A few combinations that involve these second-tier letters
# are also supported.

0     mm00 = 100
0     m0m0 = 108
0     m00m = 117
0     mr00 = 99
0     m0r0 = 102
0     m00r = 103
0     ml00 = 109
0     m0l0 = 119
0     m00l = 121
0     mmm0 = 112
0     m0mm = 98
0     mrr0 = 107
0     m0rr = 106
0     mll0 = 113
0     m0ll = 120
0     mm0m = 118
0     mmmm = 122

0     mlr0 = 111,102
0     mmr0 = 110,100
0     mr0m = 99,104
0     ml0m = 113,117
0     m0lm = 119,104

# Finally, we support some three-letter combinations.  As above, note
# that they are produced simply by pressing all of their letters
# simulateously.

0     0mmm = 116,104,101
0     0rrr = 97,105,110
0     0mlr = 97,114,101
0     mrrr = 105,110,103
0     mmrr = 97,110,100
0     mlrr = 111,110,103

# As everyone knows, keypads are supposed to be three by three.

0     rm00 = 49
0     r0m0 = 50
0     r00m = 51
0     rr00 = 52
0     r0r0 = 53
0     r00r = 54
0     rl00 = 55
0     r0l0 = 56
0     r00l = 57
0     rmm0 = 48
0     ll00 = 46
0     rll0 = 45

# Below the number keypad we place three tiers of mathematical
# operators and symbols.  First come the arithmetic operators, which
# we cascade off of the minus sign.

0     rlm0 = 43
0     rlr0 = 94
0     rl0l = 47
0     rl0m = 42
0     rl0r = 37

# The middle tier of operators include those usually used for logic
# operations.

0     rmr0 = 38
0     rml0 = 124
0     rm0m = 126
0     rm0r = 94

# The double key combinations along the bottom two rows
# produce the comparitive operators.  Note that the greater than and
# less than symbols, which we also use as angle brackets, are in
# positions similar to all other brackets (see below).

0     r0rr = 60
0     r0mm = 62
0     r0ll = 61

# The last major section involves punctuation.  The period, comma, and
# enter key are both intended to be very easy to press.  The semicolon
# is of course produced by pressing period and comma simultaneously.
# Quotes and brackets are also available here.

0     ll00 = 46
0     lll0 = 59
0     l0l0 = 44
0     l0ll = 58
0     l00l = 34
0     l00m = 39
0     l00r = 96
0     lm00 = 13,10
0     lr00 = 45
0     lrr0 = 91
0     lmm0 = 93
0     l0r0 = 40
0     l0m0 = 41
0     l0rr = 123
0     l0mm = 125

# Now that we have exhausted the same-row combinations of the lower
# three keys, we place two more echelons of symbols: one of textual
# punctuation, and the other of more obscure symbols more often
# encountered in programming (and computer typesetting).  People who
# use such keys exceedingly often may have cause to be upset with me.

0     llm0 = 63
0     llr0 = 33
0     ll0l = 36
0     ll0m = 35
0     ll0r = 126
0     llll = 64
0     llmm = 38

0     lmr0 = 47
0     lml0 = 92
0     lm0m = 95
0     lm0r = 37

# The FN modifier has no useful native function under X-windows
# (unlike the Shift, CTRL, and ALT modifiers), so we use it for useful
# keystrokes that need to be easy to get to.  Hitting single keys with
# FUNC give an arrow key rose and other screen navigation sequences.
# This is also where we put important codes like Escape, Delete, Null,
# and Linefeed.

NUM  r000 = 127            # func + BACKSPACE = delete (ascii rubout)
NUM  m000 = 0              # func + SPACE = null
NUM  l000 = 27             # func + TAB = ESCAPE
NUM  lm00 = 10             # func + ENTER = linefeed
NUM  0m00 = 20,"FF52",20   # XK_Up
NUM  00m0 = 20,"FF54",20   # XK_Down
NUM  0r00 = 20,"FF51",20   # XK_Left
NUM  0l00 = 20,"FF53",20   # XK_Right
NUM  00r0 = 20,"FF55",20   # XK_Page_Up
NUM  000r = 20,"FF56",20   # XK_Page_Down
NUM  00l0 = 20,"FF95",20   # XK_Home
NUM  000l = 20,"FF9C",20   # XK_End
NUM  000m = 20,"FF9E",20   # XK_Insert

# FUNC + keypad produces function keys.

NUM  rr00 = 20,"FFBE",20   # XK_F1
NUM  rm00 = 20,"FFBF",20   # XK_F2
NUM  rl00 = 20,"FFC0",20   # XK_F3
NUM  r0r0 = 20,"FFC1",20   # XK_F4
NUM  r0m0 = 20,"FFC2",20   # XK_F5
NUM  r0l0 = 20,"FFC3",20   # XK_F6
NUM  r00r = 20,"FFC4",20   # XK_F7
NUM  r00m = 20,"FFC5",20   # XK_F8
NUM  r00l = 20,"FFC6",20   # XK_F9
NUM  rrr0 = 20,"FFC7",20   # XK_F10
NUM  rmm0 = 20,"FFC8",20   # XK_F11
NUM  rll0 = 20,"FFC9",20   # XK_F12

# I feel like I should throw these in somewhere so here they are:

num   00mm = CAPS_LOCK
num   00rr = NUM_LOCK
num   00ll = SCROLL_LOCK
